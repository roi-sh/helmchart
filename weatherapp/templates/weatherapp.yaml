apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.weatherapp.name }}
  name: {{ .Values.weatherapp.name }}
  namespace: {{ .Values.weatherapp.namespace }}
spec:
  replicas: {{ .Values.weatherapp.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.weatherapp.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: {{ .Values.weatherapp.name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - image: "{{ .Values.weatherapp.image.repository }}:{{ .Values.weatherapp.image.tag }}"
        name: {{ .Values.weatherapp.name }}
        ports:
        - containerPort: {{ .Values.weatherapp.service.port }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if .Values.pvc.enabled }}
        volumeMounts:
        - name: efs-storage
          mountPath: /app/data
        {{- end }}
      {{- if .Values.pvc.enabled }}
      volumes:
      - name: efs-storage
        persistentVolumeClaim:
          claimName: efs-claim
      {{- end }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: {{ .Values.weatherapp.name }}